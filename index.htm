<!DOCTYPE html>

<html lang="en" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta name="author" content="github.com/jozef-javorsky-dodo" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Tree Mole Catch." />
    <meta name="theme-color" content="#7f7f7f" />

    <title>Catch the Mole - Interactive Visualization</title>

    <link
      rel="icon"
      href="data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20viewBox%3D%220%200%2016%2016%22%3E%3Cpath%20fill%3D%22%234A90E2%22%20d%3D%22M8%200a8%208%200%201%200%200%2016A8%208%200%200%200%208%200zm0%202.5a1%201%200%201%201%200%202%201%201%200%200%201%200-2zm0%203.5a4%204%200%201%201%200%208%204%204%200%200%201%200-8zm0%201.5a2.5%202.5%200%201%200%200%205%202.5%202.5%200%200%200%200-5z%22/%3E%3C/svg%3E"
    />
    <style>
      :root {
        --primary-color: #4a90e2;
        --secondary-color: #50e3c2;
        --accent-color: #f5a623;
        --background-color: #f4f7f6;
        --text-color: #4a4a4a;
        --border-color: #ddefef;
        --header-bg: #2c3e50;
        --header-text: #ecf0f1;
        --button-bg: var(--primary-color);
        --button-text: white;
        --node-fill: #ffffff;
        --node-stroke: var(--primary-color);
        --node-text-fill: var(--text-color);
        --edge-stroke: #b0bec5;
        --mole-highlight-fill: var(--accent-color);
        --query-node-stroke: var(--secondary-color);
        --font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        --container-padding: 20px;
        --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        --border-radius: 8px;
      }

      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }

      body {
        font-family: var(--font-family);
        margin: 0;
        background-color: var(--background-color);
        color: var(--text-color);
        line-height: 1.6;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        font-size: 16px;
      }

      .app-header {
        background-color: var(--header-bg);
        color: var(--header-text);
        padding: 10px var(--container-padding);
        font-size: 0.9em;
      }

      .app-header nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1200px;
        margin: 0 auto;
      }

      .app-header nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
      }

      .app-header nav ul li {
        margin-left: 15px;
      }

      .app-header nav a {
        color: var(--header-text);
        text-decoration: none;
        opacity: 0.8;
        padding: 5px 0;
      }

      .app-header nav a:hover,
      .app-header nav a:focus {
        opacity: 1;
        text-decoration: underline;
      }

      .app-header .logo {
        font-weight: bold;
        font-size: 1.2em;
      }

      .main-container {
        display: flex;
        flex-wrap: wrap;
        padding: var(--container-padding);
        gap: var(--container-padding);
        flex-grow: 1;
        max-width: 1400px;
        margin: 0 auto;
        width: 100%;
      }

      .problem-description,
      .controls-panel,
      .simulation-panel,
      .info-panel {
        background-color: white;
        padding: var(--container-padding);
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
      }

      .problem-description {
        flex-basis: 100%;
      }

      .problem-description summary {
        cursor: pointer;
        font-weight: bold;
        color: var(--primary-color);
        padding: 5px 0;
      }

      .problem-description summary:focus {
        outline: 2px solid var(--primary-color);
        outline-offset: 2px;
      }

      .controls-panel {
        flex: 1;
        min-width: 300px;
        max-width: 400px;
      }

      .info-panel {
        flex: 1;
        min-width: 300px;
        max-width: 400px;
      }

      .simulation-panel {
        flex: 2;
        min-width: 400px;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      h1,
      h2,
      h3 {
        color: var(--primary-color);
        margin-top: 0;
      }

      h1 {
        font-size: 1.8em;
        text-align: center;
        margin-bottom: 20px;
      }

      h2 {
        font-size: 1.5em;
        margin-bottom: 15px;
      }

      h3 {
        font-size: 1.2em;
        margin-bottom: 10px;
        margin-top: 20px;
      }

      label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        font-size: 0.9em;
      }

      input[type="number"],
      textarea {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        font-family: var(--font-family);
        font-size: 1em;
      }

      input[type="number"]:focus,
      textarea:focus {
        border-color: var(--primary-color);
        outline: 2px solid var(--primary-color);
        outline-offset: -1px;
      }

      textarea {
        min-height: 100px;
        resize: vertical;
      }

      button {
        background-color: var(--button-bg);
        color: var(--button-text);
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.2s ease;
        margin-right: 10px;
        margin-bottom: 10px;
      }

      button:hover:not(:disabled),
      button:focus:not(:disabled) {
        background-color: #3a7bc8;
        outline: 2px solid #2c5c91;
        outline-offset: 2px;
      }

      button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
        opacity: 0.7;
      }

      .secondary-button {
        background-color: #7f8c8d;
      }

      .secondary-button:hover:not(:disabled),
      .secondary-button:focus:not(:disabled) {
        background-color: #6c7a7d;
        outline: 2px solid #535f60;
      }

      #tree-svg-container {
        width: 100%;
        height: 500px;
        overflow: auto;
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        background-color: #fdfdfd;
      }

      #tree-svg {
        display: block;
        width: 100%;
        height: 100%;
      }

      .node circle {
        stroke-width: 2px;
        fill: var(--node-fill);
        stroke: var(--node-stroke);
        transition: fill 0.3s, stroke 0.3s, stroke-width 0.2s;
      }

      .node text {
        text-anchor: middle;
        dominant-baseline: central;
        font-size: 12px;
        fill: var(--node-text-fill);
        pointer-events: none;
        user-select: none;
      }

      .node.root circle {
        stroke: var(--secondary-color);
        stroke-width: 3px;
      }

      .node.mole-node circle {
        fill: var(--mole-highlight-fill);
      }

      .node.queried-node circle {
        stroke: var(--query-node-stroke);
        stroke-width: 4px;
      }

      .node:not([aria-disabled="true"]):hover circle,
      .node:not([aria-disabled="true"]):focus circle {
        stroke-width: 4px;
        filter: drop-shadow(0px 0px 4px var(--primary-color));
      }

      .node:not([aria-disabled="true"]):focus {
        outline: none;
      }

      .node[aria-disabled="true"] {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .node[aria-disabled="true"] circle {
        pointer-events: none;
      }

      .edge {
        stroke: var(--edge-stroke);
        stroke-width: 1.5px;
      }

      .info-panel p {
        margin: 5px 0 10px;
      }

      .info-panel strong {
        color: var(--primary-color);
      }

      #status-message {
        font-weight: bold;
        min-height: 1.6em;
      }

      #status-message.success {
        color: #28a745;
      }

      #status-message.error {
        color: #dc3545;
      }

      .hide-for-true-game {
        display: none !important;
      }

      @media (max-width: 900px) {
        .main-container {
          flex-direction: column;
        }

        .controls-panel,
        .info-panel,
        .simulation-panel {
          flex-basis: auto;
          width: 100%;
          max-width: none;
        }

        #tree-svg-container {
          height: 400px;
        }

        .app-header nav {
          flex-direction: column;
          align-items: flex-start;
        }

        .app-header nav ul {
          margin-top: 10px;
          padding-left: 0;
        }

        .app-header nav ul li {
          margin-left: 0;
          margin-right: 15px;
        }
      }

      @media (max-width: 480px) {
        h1 {
          font-size: 1.5em;
        }

        h2 {
          font-size: 1.3em;
        }

        h3 {
          font-size: 1.1em;
        }

        button {
          font-size: 0.9em;
          padding: 8px 12px;
        }

        input[type="number"],
        textarea {
          font-size: 0.9em;
          padding: 8px;
        }

        .app-header nav ul {
          flex-direction: column;
        }

        .app-header nav ul li {
          margin-right: 0;
          margin-bottom: 5px;
        }
      }

      .footer {
        text-align: center;
        padding: 15px;
        font-size: 0.9em;
        color: #7f8c8d;
        background-color: #e8e8e8;
        margin-top: auto;
      }

      .visually-hidden {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
      }
    </style>
  </head>

  <body>
    <header class="app-header">
      <nav>
        <div class="logo">Tree Mole Catch - Visualizer</div>
        <ul>
          <li>
            <a
              href="https://github.com/jozef-javorsky-dodo"
              target="_blank"
              rel="noopener noreferrer"
              >GitHub <span class="visually-hidden">(opens in new tab)</span></a
            >
          </li>
          <li>
            <a
              href="https://g.dev/jozef-javorsky-dodo"
              target="_blank"
              rel="noopener noreferrer"
              >Google Dev
              <span class="visually-hidden">(opens in new tab)</span></a
            >
          </li>
          <li><a href="mailto:jozef.javorsky.dodo@gmail.com">Email</a></li>
        </ul>
      </nav>
    </header>

    <main class="main-container">
      <section
        class="problem-description"
        aria-labelledby="problem-desc-heading"
      >
        <details>
          <summary id="problem-desc-heading">
            Catch the Mole - Problem Description
          </summary>
          <div>
            <p>
              This is an interactive problem. You are given a tree of N nodes
              with node 1 as its root. There is a hidden mole in one of the
              nodes. To find its position, you can pick an integer x (1 &le; x
              &le; N) to make an inquiry. The jury will return 1 if the mole is
              in subtree x. Otherwise, the jury will return 0. If the judge
              returns 1 and the mole is in root node 1, or if the judge returns
              0 and the mole is in root node 1, the mole does not move. If the
              judge returns 1 and the mole is not in root node 1, the mole does
              not move. If the judge returns 0 and the mole is not in root node
              1, the mole will move to the parent node of the node it is
              currently on. Use at most 160 operations to find the current node
              where the mole is located.
            </p>
            <p>
              <strong>Simplified mole movement rule:</strong> If query
              <code>? q</code> gets response <code>0</code> (mole NOT in subtree
              of <code>q</code>), AND mole is NOT at root (node 1), THEN mole
              moves to its parent. Otherwise, mole does not move.
            </p>
          </div>
        </details>
      </section>

      <section class="controls-panel" aria-labelledby="controls-heading">
        <h2 id="controls-heading">Controls</h2>
        <div>
          <label for="num-nodes">Number of Nodes (N):</label>
          <input type="number" id="num-nodes" min="2" max="5000" value="6" />
        </div>
        <div>
          <label for="edges-input">Edges (one per line, e.g., "1 2"):</label>
          <textarea
            id="edges-input"
            rows="5"
            aria-describedby="edges-format-hint"
          >
1 2
1 3
1 4
4 5
5 6</textarea
          >
          <small
            id="edges-format-hint"
            style="
              display: block;
              margin-bottom: 10px;
              font-size: 0.85em;
              color: #555;
            "
            >Each line: u v. Nodes 1 to N.</small
          >
        </div>
        <div class="hide-for-true-game" id="initial-mole-pos-container">
          <label for="initial-mole-pos">Initial Mole Position (Debug):</label>
          <input type="number" id="initial-mole-pos" min="1" value="6" />
        </div>
        <button id="start-reset-button">Start Game</button>
        <button id="reveal-mole-button" class="secondary-button" disabled>
          Reveal Mole
        </button>
        <h3 id="actions-heading">Actions</h3>
        <div>
          <label for="guess-mole-pos">Guess Mole's Current Position:</label>
          <input type="number" id="guess-mole-pos" min="1" />
        </div>
        <button id="guess-button" disabled>Guess!</button>
      </section>

      <section class="simulation-panel" aria-labelledby="simulation-heading">
        <h2 id="simulation-heading">Tree Visualization</h2>
        <div
          id="tree-svg-container"
          role="application"
          aria-roledescription="Interactive tree visualization"
        >
          <svg
            id="tree-svg"
            xmlns="http://www.w3.org/2000/svg"
            preserveAspectRatio="xMidYMid meet"
          ></svg>
        </div>
      </section>

      <section class="info-panel" aria-labelledby="info-heading">
        <h2 id="info-heading">Game Information</h2>
        <p>Queries Used: <strong id="query-count">0 / 160</strong></p>
        <p>Last Query: <strong id="last-query-info">-</strong></p>
        <p>Mole Status: <strong id="mole-status-info">-</strong></p>
        <p id="status-message" aria-live="polite">
          Enter tree details and start the game.
        </p>
      </section>
    </main>
    <footer class="footer">
      <p>Catch The Mole Visualizer - Pure HTML/CSS/JS SPA</p>
    </footer>

    <script>
      (function () {
        "use strict";
        const ROOT_NODE_ID = 1;
        const SVG_NS = "http://www.w3.org/2000/svg";

        let N = 0;
        let adj = [];
        let parent = [];
        let depth = [];
        let subtreeNodes = [];
        let nodeVisuals = {};

        let currentMolePos = -1;
        let initialMolePosInternal = -1;
        let queryCounter = 0;
        let gameActive = false;
        let moleRevealed = false;

        const numNodesInput = document.getElementById("num-nodes");
        const edgesInput = document.getElementById("edges-input");
        const initialMolePosInput = document.getElementById("initial-mole-pos");
        const initialMolePosContainer = document.getElementById(
          "initial-mole-pos-container"
        );

        const startResetButton = document.getElementById("start-reset-button");
        const revealMoleButton = document.getElementById("reveal-mole-button");
        const guessMolePosInput = document.getElementById("guess-mole-pos");
        const guessButton = document.getElementById("guess-button");

        const svgElement = document.getElementById("tree-svg");
        const svgContainer = document.getElementById("tree-svg-container");

        const queryCountDisplay = document.getElementById("query-count");
        const lastQueryInfoDisplay = document.getElementById("last-query-info");
        const moleStatusInfoDisplay =
          document.getElementById("mole-status-info");
        const statusMessageDisplay = document.getElementById("status-message");

        function updateStatus(message, type = "") {
          statusMessageDisplay.textContent = message;
          statusMessageDisplay.className = type;
        }

        function dfsPrecomputation(u, p, d, currentAdjList, visited) {
          visited.add(u);
          parent[u] = p;
          depth[u] = d;
          subtreeNodes[u] = new Set([u]);
          if (currentAdjList[u]) {
            for (const v of currentAdjList[u]) {
              if (v === p) continue;
              if (visited.has(v)) {
                throw new Error(
                  "Graph is not a tree (cycle detected or edge re-traversal)."
                );
              }
              dfsPrecomputation(v, u, d + 1, currentAdjList, visited);
              subtreeNodes[u] = new Set([
                ...subtreeNodes[u],
                ...subtreeNodes[v],
              ]);
            }
          }
        }

        function calculateNodePositions(maxDepthVal, nodesByDepthMap) {
          const positions = {};
          const Y_SPACING = 80;
          const X_SPACING_MIN = 60;
          const NODE_RADIUS = 15;
          const SVG_TOP_MARGIN = 50 + NODE_RADIUS;
          const SVG_SIDE_PADDING = 30 + NODE_RADIUS;

          const containerWidth = Math.max(
            300,
            svgContainer.clientWidth ||
              svgContainer.parentNode.clientWidth ||
              window.innerWidth
          );

          let maxNodesOnAnyLevel = 0;
          for (let d = 0; d <= maxDepthVal; d++) {
            maxNodesOnAnyLevel = Math.max(
              maxNodesOnAnyLevel,
              (nodesByDepthMap[d] || []).length
            );
          }

          const requiredTreeWidth =
            maxNodesOnAnyLevel > 0
              ? (maxNodesOnAnyLevel - 1) * X_SPACING_MIN + 2 * SVG_SIDE_PADDING
              : 2 * SVG_SIDE_PADDING;
          const viewboxWidth = Math.max(containerWidth, requiredTreeWidth);
          const viewboxHeight =
            (maxDepthVal + 1) * Y_SPACING + SVG_TOP_MARGIN + NODE_RADIUS;

          for (let d = 0; d <= maxDepthVal; d++) {
            const levelNodes = nodesByDepthMap[d] || [];
            const numNodesOnLevel = levelNodes.length;
            const currentLevelWidth = (numNodesOnLevel - 1) * X_SPACING_MIN;
            const startX = (viewboxWidth - currentLevelWidth) / 2;

            levelNodes.forEach((nodeId, i) => {
              positions[nodeId] = {
                x: startX + i * X_SPACING_MIN,
                y: d * Y_SPACING + SVG_TOP_MARGIN,
              };
            });
          }
          svgElement.setAttribute(
            "viewBox",
            `0 0 ${viewboxWidth} ${viewboxHeight}`
          );
          return positions;
        }

        function drawTree() {
          svgElement.innerHTML = "";

          const svgTitle = document.createElementNS(SVG_NS, "title");
          svgTitle.id = "svg-title";
          svgTitle.textContent = "Tree structure";
          svgElement.appendChild(svgTitle);

          const svgDesc = document.createElementNS(SVG_NS, "desc");
          svgDesc.id = "svg-desc";
          svgDesc.textContent =
            "An interactive representation of the game tree. Click nodes to query the mole's location.";
          svgElement.appendChild(svgDesc);

          nodeVisuals = {};

          if (N === 0 || adj.length === 0) return;

          const nodesByDepth = {};
          let maxDepthVal = 0;
          for (let i = 1; i <= N; i++) {
            if (depth[i] !== undefined && parent[i] !== undefined) {
              if (!nodesByDepth[depth[i]]) {
                nodesByDepth[depth[i]] = [];
              }
              nodesByDepth[depth[i]].push(i);
              if (depth[i] > maxDepthVal) maxDepthVal = depth[i];
            }
          }

          const positions = calculateNodePositions(maxDepthVal, nodesByDepth);

          for (let i = 1; i <= N; i++) {
            if (
              parent[i] !== 0 &&
              parent[i] !== undefined &&
              positions[i] &&
              positions[parent[i]]
            ) {
              const edge = document.createElementNS(SVG_NS, "line");
              edge.setAttribute("x1", positions[parent[i]].x);
              edge.setAttribute("y1", positions[parent[i]].y);
              edge.setAttribute("x2", positions[i].x);
              edge.setAttribute("y2", positions[i].y);
              edge.classList.add("edge");
              svgElement.appendChild(edge);
            }
          }

          for (let i = 1; i <= N; i++) {
            if (
              !positions[i] ||
              depth[i] === undefined ||
              parent[i] === undefined
            )
              continue;

            const g = document.createElementNS(SVG_NS, "g");
            g.classList.add("node");
            g.dataset.id = i;
            if (i === ROOT_NODE_ID) g.classList.add("root");

            g.setAttribute("role", "button");
            g.setAttribute("tabindex", "0");
            g.setAttribute("aria-label", `Query Node ${i}`);
            g.setAttribute("aria-disabled", "false");

            const circle = document.createElementNS(SVG_NS, "circle");
            circle.setAttribute("cx", positions[i].x);
            circle.setAttribute("cy", positions[i].y);
            circle.setAttribute("r", "15");

            const text = document.createElementNS(SVG_NS, "text");
            text.setAttribute("x", positions[i].x);
            text.setAttribute("y", positions[i].y);
            text.textContent = i;

            g.appendChild(circle);
            g.appendChild(text);
            svgElement.appendChild(g);
            nodeVisuals[i] = g;

            g.addEventListener("click", () => handleNodeClick(i));
            g.addEventListener("keydown", (e) => {
              if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                handleNodeClick(i);
              }
            });
          }
          if (moleRevealed) updateMoleVisual(currentMolePos);
        }

        function updateMoleVisual(moleNodeId) {
          Object.values(nodeVisuals).forEach((g) => {
            if (g) g.classList.remove("mole-node");
          });
          if (moleNodeId !== -1 && nodeVisuals[moleNodeId] && moleRevealed) {
            nodeVisuals[moleNodeId].classList.add("mole-node");
          }
        }

        function highlightQueriedNode(nodeId) {
          Object.values(nodeVisuals).forEach((g) => {
            if (g) g.classList.remove("queried-node");
          });
          if (nodeId !== -1 && nodeVisuals[nodeId]) {
            nodeVisuals[nodeId].classList.add("queried-node");
          }
        }

        function handleNodeClick(queryNodeId) {
          if (
            !gameActive ||
            (nodeVisuals[queryNodeId] &&
              nodeVisuals[queryNodeId].getAttribute("aria-disabled") === "true")
          ) {
            if (!gameActive)
              updateStatus(
                "Game not active. Please start a new game.",
                "error"
              );
            return;
          }

          queryCounter++;
          highlightQueriedNode(queryNodeId);

          const moleIsInSubtree =
            subtreeNodes[queryNodeId] &&
            subtreeNodes[queryNodeId].has(currentMolePos);
          const response = moleIsInSubtree ? 1 : 0;
          let moleMoved = false;
          let prevMolePos = currentMolePos;

          lastQueryInfoDisplay.textContent = `? ${queryNodeId} -> ${response}`;

          if (response === 0 && currentMolePos !== ROOT_NODE_ID) {
            if (
              parent[currentMolePos] !== 0 &&
              parent[currentMolePos] !== undefined
            ) {
              currentMolePos = parent[currentMolePos];
              moleMoved = true;
            }
          }

          if (moleMoved) {
            moleStatusInfoDisplay.textContent = `Mole moved from ${prevMolePos} to ${currentMolePos}.`;
          } else {
            moleStatusInfoDisplay.textContent = `Mole stayed at ${prevMolePos}.`;
          }

          if (moleRevealed) updateMoleVisual(currentMolePos);
          queryCountDisplay.textContent = `${queryCounter} / 160`;
          updateStatus(
            `Queried node ${queryNodeId}. Click another node or make a guess.`
          );

          if (queryCounter >= 160) {
            updateStatus(
              "Query limit reached. Make your final guess!",
              "error"
            );
            Object.values(nodeVisuals).forEach((g) => {
              if (g) g.setAttribute("aria-disabled", "true");
            });
            guessButton.focus();
          }
        }

        function resetGameUI() {
          gameActive = false;
          queryCounter = 0;
          currentMolePos = -1;
          initialMolePosInternal = -1;
          N = 0;
          adj = [];
          parent = [];
          depth = [];
          subtreeNodes = [];
          nodeVisuals = {};
          moleRevealed = false;

          svgElement.innerHTML = "";
          const svgTitle = document.createElementNS(SVG_NS, "title");
          svgTitle.id = "svg-title";
          svgTitle.textContent = "Tree structure";
          svgElement.appendChild(svgTitle);
          const svgDesc = document.createElementNS(SVG_NS, "desc");
          svgDesc.id = "svg-desc";
          svgDesc.textContent =
            "An interactive representation of the game tree. Click nodes to query the mole's location.";
          svgElement.appendChild(svgDesc);

          queryCountDisplay.textContent = `0 / 160`;
          lastQueryInfoDisplay.textContent = "-";
          moleStatusInfoDisplay.textContent = "-";

          revealMoleButton.disabled = true;
          revealMoleButton.textContent = "Reveal Mole";
          guessButton.disabled = true;
          guessMolePosInput.value = "";

          numNodesInput.disabled = false;
          edgesInput.disabled = false;
          initialMolePosInput.disabled = false;

          startResetButton.textContent = "Start Game";
          updateStatus("Game reset. Ready to start a new game.", "success");
          numNodesInput.focus();
        }

        function handleStartReset() {
          if (startResetButton.textContent === "Reset Game") {
            resetGameUI();
            return;
          }

          try {
            N = parseInt(numNodesInput.value);
            const edgesStr = edgesInput.value.trim().split("\n");

            if (isNaN(N) || N < 2 || N > 5000) {
              updateStatus(
                "Invalid number of nodes. Must be between 2 and 5000.",
                "error"
              );
              numNodesInput.focus();
              return;
            }
            initialMolePosInternal = Math.floor(Math.random() * N) + 1;

            adj = Array.from({ length: N + 1 }, () => []);
            let edgeCount = 0;
            for (const line of edgesStr) {
              if (line.trim() === "") continue;
              const parts = line.trim().split(/\s+/);
              if (parts.length === 2) {
                const u = parseInt(parts[0]);
                const v = parseInt(parts[1]);
                if (
                  isNaN(u) ||
                  isNaN(v) ||
                  u < 1 ||
                  u > N ||
                  v < 1 ||
                  v > N ||
                  u === v
                ) {
                  updateStatus(
                    `Invalid edge: "${line}". Nodes must be between 1 and ${N} and distinct.`,
                    "error"
                  );
                  edgesInput.focus();
                  return;
                }
                adj[u].push(v);
                adj[v].push(u);
                edgeCount++;
              } else {
                updateStatus(
                  `Invalid edge format: "${line}". Expected "u v".`,
                  "error"
                );
                edgesInput.focus();
                return;
              }
            }

            if (N > 1 && edgeCount !== N - 1) {
              updateStatus(
                `Incorrect number of edges. Expected ${
                  N - 1
                } for a tree with ${N} nodes, got ${edgeCount}.`,
                "error"
              );
              edgesInput.focus();
              return;
            }
            if (N === 1 && edgeCount !== 0) {
              updateStatus(
                `Incorrect number of edges for N=1. Expected 0, got ${edgeCount}.`,
                "error"
              );
              edgesInput.focus();
              return;
            }

            parent = Array(N + 1).fill(undefined);
            depth = Array(N + 1).fill(undefined);
            subtreeNodes = Array(N + 1)
              .fill(null)
              .map(() => new Set());

            let visitedDfs = new Set();
            dfsPrecomputation(ROOT_NODE_ID, 0, 0, adj, visitedDfs);

            if (N > 1) {
              for (let i = 1; i <= N; i++) {
                if (!visitedDfs.has(i)) {
                  updateStatus(
                    `Node ${i} is not reachable from root ${ROOT_NODE_ID}. The graph must be a connected tree.`,
                    "error"
                  );
                  edgesInput.focus();
                  return;
                }
              }
            }

            currentMolePos = initialMolePosInternal;
            queryCounter = 0;
            gameActive = true;
            moleRevealed = false;

            startResetButton.textContent = "Reset Game";
            revealMoleButton.disabled = false;
            guessButton.disabled = false;
            guessMolePosInput.max = N;
            guessMolePosInput.value = "";

            numNodesInput.disabled = true;
            edgesInput.disabled = true;
            initialMolePosInput.disabled = true;

            drawTree();

            queryCountDisplay.textContent = `${queryCounter} / 160`;
            lastQueryInfoDisplay.textContent = "-";
            moleStatusInfoDisplay.textContent = `Mole is hidden in the tree.`;
            updateStatus("Game started. Click a node to query.", "success");
            Object.values(nodeVisuals).forEach((g) => {
              if (g) g.setAttribute("aria-disabled", "false");
            });
          } catch (error) {
            updateStatus(
              `Error initializing game: ${error.message || "Unknown error"}.`,
              "error"
            );
            console.error("Initialization error:", error);
            gameActive = false;
            startResetButton.textContent = "Start Game";
            numNodesInput.disabled = false;
            edgesInput.disabled = false;
            initialMolePosInput.disabled = false;
          }
        }

        revealMoleButton.addEventListener("click", () => {
          if (revealMoleButton.disabled) return;
          moleRevealed = !moleRevealed;
          revealMoleButton.textContent = moleRevealed
            ? "Hide Mole"
            : "Reveal Mole";
          if (moleRevealed) {
            updateMoleVisual(currentMolePos);
            if (gameActive)
              moleStatusInfoDisplay.textContent += ` Current mole location: ${currentMolePos}.`;
            else
              moleStatusInfoDisplay.textContent = `Mole was at ${currentMolePos}.`;
          } else {
            updateMoleVisual(-1);
            if (gameActive)
              moleStatusInfoDisplay.textContent =
                moleStatusInfoDisplay.textContent.replace(
                  ` Current mole location: ${currentMolePos}.`,
                  ""
                );
            else
              moleStatusInfoDisplay.textContent =
                moleStatusInfoDisplay.textContent.replace(
                  `Mole was at ${currentMolePos}.`,
                  ""
                );
          }
        });

        guessButton.addEventListener("click", () => {
          if (!gameActive) return;
          const guessedPos = parseInt(guessMolePosInput.value);
          if (isNaN(guessedPos) || guessedPos < 1 || guessedPos > N) {
            updateStatus(`Invalid guess. Must be between 1 and ${N}.`, "error");
            guessMolePosInput.focus();
            return;
          }

          gameActive = false;

          Object.values(nodeVisuals).forEach((g) => {
            if (g) g.setAttribute("aria-disabled", "true");
          });

          if (guessedPos === currentMolePos) {
            updateStatus(
              `Congratulations! You found the mole at node ${currentMolePos} in ${queryCounter} queries.`,
              "success"
            );
          } else {
            updateStatus(
              `Incorrect. The mole was at node ${currentMolePos}. You guessed ${guessedPos}. Game Over.`,
              "error"
            );
          }
          moleRevealed = true;
          updateMoleVisual(currentMolePos);

          revealMoleButton.disabled = true;
          guessButton.disabled = true;
          startResetButton.focus();
        });

        function setupEventListeners() {
          startResetButton.addEventListener("click", handleStartReset);
          numNodesInput.addEventListener("change", () => {
            const nVal = parseInt(numNodesInput.value);
            if (!isNaN(nVal) && nVal > 0) {
              initialMolePosInput.max = nVal;
              guessMolePosInput.max = nVal;
              if (parseInt(initialMolePosInput.value) > nVal)
                initialMolePosInput.value = String(nVal);
              if (parseInt(guessMolePosInput.value) > nVal)
                guessMolePosInput.value = String(nVal);
            }
          });
        }

        function init() {
          setupEventListeners();
          resetGameUI();
          initialMolePosContainer.classList.add("hide-for-true-game");
          updateStatus("Enter tree details and start the game.");
        }

        document.addEventListener("DOMContentLoaded", init);
      })();
    </script>
  </body>
</html>
